// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/johnkerl/miller/internal/pkg/parsing/token"
)

const (
	NoState    = -1
	NumStates  = 331
	NumSymbols = 638
)

type Lexer struct {
	src     []byte
	pos     int
	line    int
	column  int
	Context token.Context
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:     src,
		pos:     0,
		line:    1,
		column:  1,
		Context: nil,
	}
	return lexer
}

// SourceContext is a simple instance of a token.Context which
// contains the name of the source file.
type SourceContext struct {
	Filepath string
}

func (s *SourceContext) Source() string {
	return s.Filepath
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	lexer := NewLexer(src)
	lexer.Context = &SourceContext{Filepath: fpath}
	return lexer, nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = &token.Token{}
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		tok.Pos.Context = l.Context
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn
	tok.Pos.Context = l.Context

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '"'
1: '"'
2: '"'
3: '"'
4: 'i'
5: '0'
6: 'x'
7: '0'
8: 'o'
9: '0'
10: 'b'
11: '.'
12: '.'
13: '-'
14: '.'
15: '.'
16: '-'
17: '.'
18: '.'
19: '-'
20: 'M'
21: '_'
22: 'P'
23: 'I'
24: 'M'
25: '_'
26: 'E'
27: 'n'
28: 'u'
29: 'l'
30: 'l'
31: 'I'
32: 'n'
33: 'f'
34: 'N'
35: 'a'
36: 'N'
37: 'I'
38: 'P'
39: 'S'
40: 'I'
41: 'F'
42: 'S'
43: 'I'
44: 'R'
45: 'S'
46: 'O'
47: 'P'
48: 'S'
49: 'O'
50: 'F'
51: 'S'
52: 'O'
53: 'R'
54: 'S'
55: 'F'
56: 'L'
57: 'A'
58: 'T'
59: 'S'
60: 'E'
61: 'P'
62: 'N'
63: 'F'
64: 'N'
65: 'R'
66: 'F'
67: 'N'
68: 'R'
69: 'F'
70: 'I'
71: 'L'
72: 'E'
73: 'N'
74: 'A'
75: 'M'
76: 'E'
77: 'F'
78: 'I'
79: 'L'
80: 'E'
81: 'N'
82: 'U'
83: 'M'
84: 'E'
85: 'N'
86: 'V'
87: 'b'
88: 'e'
89: 'g'
90: 'i'
91: 'n'
92: 'd'
93: 'o'
94: 'e'
95: 'l'
96: 'i'
97: 'f'
98: 'e'
99: 'l'
100: 's'
101: 'e'
102: 'e'
103: 'n'
104: 'd'
105: 'f'
106: 'i'
107: 'l'
108: 't'
109: 'e'
110: 'r'
111: 'f'
112: 'o'
113: 'r'
114: 'i'
115: 'f'
116: 'i'
117: 'n'
118: 'w'
119: 'h'
120: 'i'
121: 'l'
122: 'e'
123: 'b'
124: 'r'
125: 'e'
126: 'a'
127: 'k'
128: 'c'
129: 'o'
130: 'n'
131: 't'
132: 'i'
133: 'n'
134: 'u'
135: 'e'
136: 'r'
137: 'e'
138: 't'
139: 'u'
140: 'r'
141: 'n'
142: 'f'
143: 'u'
144: 'n'
145: 'c'
146: 's'
147: 'u'
148: 'b'
149: 'r'
150: 'c'
151: 'a'
152: 'l'
153: 'l'
154: 'a'
155: 'r'
156: 'r'
157: 'b'
158: 'o'
159: 'o'
160: 'l'
161: 'f'
162: 'l'
163: 'o'
164: 'a'
165: 't'
166: 'i'
167: 'n'
168: 't'
169: 'm'
170: 'a'
171: 'p'
172: 'n'
173: 'u'
174: 'm'
175: 's'
176: 't'
177: 'r'
178: 'v'
179: 'a'
180: 'r'
181: 'f'
182: 'u'
183: 'n'
184: 'c'
185: 't'
186: 'u'
187: 'n'
188: 's'
189: 'e'
190: 't'
191: 'd'
192: 'u'
193: 'm'
194: 'p'
195: 'e'
196: 'd'
197: 'u'
198: 'm'
199: 'p'
200: 'e'
201: 'm'
202: 'i'
203: 't'
204: '1'
205: 'e'
206: 'm'
207: 'i'
208: 't'
209: 'e'
210: 'm'
211: 'i'
212: 't'
213: 'p'
214: 'e'
215: 'm'
216: 'i'
217: 't'
218: 'f'
219: 'e'
220: 'p'
221: 'r'
222: 'i'
223: 'n'
224: 't'
225: 'e'
226: 'p'
227: 'r'
228: 'i'
229: 'n'
230: 't'
231: 'n'
232: 'p'
233: 'r'
234: 'i'
235: 'n'
236: 't'
237: 'p'
238: 'r'
239: 'i'
240: 'n'
241: 't'
242: 'n'
243: 't'
244: 'e'
245: 'e'
246: 'e'
247: 'x'
248: 'i'
249: 't'
250: 's'
251: 't'
252: 'd'
253: 'o'
254: 'u'
255: 't'
256: 's'
257: 't'
258: 'd'
259: 'e'
260: 'r'
261: 'r'
262: '$'
263: '$'
264: '{'
265: '}'
266: '$'
267: '*'
268: '@'
269: '@'
270: '{'
271: '}'
272: '@'
273: '*'
274: 'a'
275: 'l'
276: 'l'
277: '%'
278: '%'
279: '%'
280: 'p'
281: 'a'
282: 'n'
283: 'i'
284: 'c'
285: '%'
286: '%'
287: '%'
288: ';'
289: '{'
290: '}'
291: '='
292: '>'
293: '>'
294: '>'
295: '|'
296: ','
297: '('
298: ')'
299: '$'
300: '['
301: ']'
302: '$'
303: '['
304: '['
305: '$'
306: '['
307: '['
308: '['
309: '@'
310: '['
311: '|'
312: '|'
313: '='
314: '^'
315: '^'
316: '='
317: '&'
318: '&'
319: '='
320: '?'
321: '?'
322: '='
323: '?'
324: '?'
325: '?'
326: '='
327: '|'
328: '='
329: '&'
330: '='
331: '^'
332: '='
333: '<'
334: '<'
335: '='
336: '>'
337: '>'
338: '='
339: '>'
340: '>'
341: '>'
342: '='
343: '+'
344: '='
345: '.'
346: '='
347: '-'
348: '='
349: '*'
350: '='
351: '/'
352: '='
353: '/'
354: '/'
355: '='
356: '%'
357: '='
358: '*'
359: '*'
360: '='
361: '?'
362: ':'
363: '|'
364: '|'
365: '^'
366: '^'
367: '&'
368: '&'
369: '?'
370: '?'
371: '?'
372: '?'
373: '?'
374: '='
375: '~'
376: '!'
377: '='
378: '~'
379: '='
380: '='
381: '!'
382: '='
383: '<'
384: '='
385: '>'
386: '>'
387: '='
388: '<'
389: '<'
390: '='
391: '^'
392: '&'
393: '<'
394: '<'
395: '>'
396: '>'
397: '>'
398: '+'
399: '-'
400: '.'
401: '+'
402: '.'
403: '-'
404: '*'
405: '/'
406: '/'
407: '/'
408: '%'
409: '.'
410: '*'
411: '.'
412: '/'
413: '.'
414: '/'
415: '/'
416: '.'
417: '!'
418: '~'
419: '*'
420: '*'
421: '['
422: '['
423: '['
424: '['
425: '['
426: '['
427: '_'
428: '_'
429: ' '
430: '!'
431: '#'
432: '$'
433: '%'
434: '&'
435: '''
436: '\'
437: '('
438: ')'
439: '*'
440: '+'
441: ','
442: '-'
443: '.'
444: '/'
445: ':'
446: ';'
447: '<'
448: '='
449: '>'
450: '?'
451: '@'
452: '['
453: ']'
454: '^'
455: '_'
456: '`'
457: '{'
458: '|'
459: '}'
460: '~'
461: '\'
462: '\'
463: '\'
464: '"'
465: '\'
466: '['
467: '\'
468: ']'
469: '\'
470: '.'
471: '\'
472: '*'
473: '\'
474: '%'
475: '\'
476: 'A'
477: '\'
478: 'B'
479: '\'
480: 'C'
481: '\'
482: 'D'
483: '\'
484: 'G'
485: '\'
486: 'H'
487: '\'
488: 'K'
489: '\'
490: 'L'
491: '\'
492: 'N'
493: '\'
494: 'P'
495: '\'
496: 'R'
497: '\'
498: 'S'
499: '\'
500: 'U'
501: '\'
502: 'V'
503: '\'
504: 'W'
505: '\'
506: 'X'
507: '\'
508: 'Z'
509: '\'
510: 'a'
511: '\'
512: 'b'
513: '\'
514: 'c'
515: '\'
516: 'd'
517: '\'
518: 'f'
519: '\'
520: 'g'
521: '\'
522: 'h'
523: '\'
524: 'k'
525: '\'
526: 'l'
527: '\'
528: 'n'
529: '\'
530: 'p'
531: '\'
532: 'r'
533: '\'
534: 's'
535: '\'
536: 't'
537: '\'
538: 'u'
539: '\'
540: 'v'
541: '\'
542: 'w'
543: '\'
544: 'x'
545: '\'
546: 'z'
547: '\'
548: '0'
549: '\'
550: '1'
551: '\'
552: '2'
553: '\'
554: '3'
555: '\'
556: '4'
557: '\'
558: '5'
559: '\'
560: '6'
561: '\'
562: '7'
563: '\'
564: '8'
565: '\'
566: '9'
567: 'e'
568: 'E'
569: 't'
570: 'r'
571: 'u'
572: 'e'
573: 'f'
574: 'a'
575: 'l'
576: 's'
577: 'e'
578: ' '
579: '!'
580: '#'
581: '$'
582: '%'
583: '&'
584: '''
585: '\'
586: '('
587: ')'
588: '*'
589: '+'
590: ','
591: '-'
592: '.'
593: '/'
594: ':'
595: ';'
596: '<'
597: '='
598: '>'
599: '?'
600: '@'
601: '['
602: ']'
603: '^'
604: '_'
605: '`'
606: '|'
607: '~'
608: '\'
609: '{'
610: '\'
611: '}'
612: ' '
613: '\t'
614: '\n'
615: '\r'
616: '#'
617: '\n'
618: 'a'-'z'
619: 'A'-'Z'
620: \u00a0-\u00ff
621: \u0100-\U0010ffff
622: '0'-'9'
623: '0'-'9'
624: 'a'-'f'
625: 'A'-'F'
626: '0'-'7'
627: '0'-'1'
628: 'A'-'Z'
629: 'a'-'z'
630: '0'-'9'
631: \u00a0-\u00ff
632: \u0100-\U0010ffff
633: 'A'-'Z'
634: 'a'-'z'
635: '0'-'9'
636: \u0100-\U0010ffff
637: .
*/
